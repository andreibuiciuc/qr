package moduler

import (
	"qr/qr-gen/encoder"
	"qr/qr-gen/interleaver"
	"qr/qr-gen/versioner"
	"testing"
)

func TestModuler(t *testing.T) {
	// encoded
	// m := NewModuler(5)
	// m.CreateModuleMatrix(encoded)
	input := "https://www.qrcode.com/"

	v := versioner.New()
	mode, _ := v.GetMode(input)
	version, _ := v.GetVersion(input, mode, versioner.QrEcQuartile)

	e := encoder.New()
	encoded, _ := e.Encode(input, versioner.QrEcQuartile)
	encoded = e.AugmentEncodedInput(encoded, version, versioner.QrEcMedium)

	i := interleaver.New()
	data := i.GetFinalMessage(encoded, version, versioner.QrEcMedium)

	m := NewModuler(int(version))
	m.CreateModuleMatrix(data)
}
